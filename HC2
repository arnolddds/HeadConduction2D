
import numpy as np
import matplotlib.pyplot as plt


class TwoLayerPlate:
    def __init__(self, N1, N2, t_end, L, lambda1, lambda2, ro1, ro2, c1, c2, T0, Tl, Tr):
        """
        Инициализация параметров задачи для двухслойной пластины (неявная схема).

        :param N1: Количество узлов в первой части пластины
        :param N2: Количество узлов во второй части пластины
        :param t_end: Время моделирования (сек)
        :param L: Длина пластины (м)
        :param lambda1: Коэффициент теплопроводности первого слоя (Вт/м°C)
        :param lambda2: Коэффициент теплопроводности второго слоя (Вт/м°C)
        :param ro1: Плотность первого слоя (кг/м³)
        :param ro2: Плотность второго слоя (кг/м³)
        :param c1: Теплоемкость первого слоя (Дж/кг°C)
        :param c2: Теплоемкость второго слоя (Дж/кг°C)
        :param T0: Начальная температура пластины (°C)
        :param Tl: Температура на левом конце пластины (°C)
        :param Tr: Температура на правом конце пластины (°C)
        """
        self.N1 = N1
        self.N2 = N2
        self.N = N1 + N2   # Общее количество узлов
        self.t_end = t_end
        self.L = L
        self.lambda1 = lambda1
        self.lambda2 = lambda2
        self.ro1 = ro1
        self.ro2 = ro2
        self.c1 = c1
        self.c2 = c2
        self.T0 = T0
        self.Tl = Tl
        self.Tr = Tr

        # Шаг по пространству для всей пластины
        self.h = self.L / (self.N)

        # Коэффициенты температуропроводности для первого и второго слоев
        self.a1 = self.lambda1 / (self.ro1 * self.c1)
        self.a2 = self.lambda2 / (self.ro2 * self.c2)

        # Время моделирования и шаг по времени
        self.tau = self.t_end / 100.0

        # Инициализация температурного поля
        self.T = np.full(self.N, self.T0)
        self.T[0] = self.Tl
        self.T[-1] = self.Tr

        # История температур для анализа
        self.T_history = []

    def solve(self):
        """Решение задачи теплопроводности для двухслойной пластины с использованием неявной схемы."""
        alpha = np.zeros(self.N)
        beta = np.zeros(self.N)

        for step in range(int(self.t_end / self.tau)):
            T_new = self.T.copy()

            # Прямая прогонка для первого слоя
            alpha[0] = 0  # Граничное условие на левом краю (постоянная температура)
            beta[0] = self.Tl

            for i in range(1, self.N1):
                ai = self.lambda1 / (self.h ** 2)
                bi = 2.0 * self.lambda1 / self.h ** 2 + self.ro1 * self.c1 / self.tau
                ci = self.lambda1 / self.h ** 2
                fi = -self.ro1 * self.c1 * self.T[i] / self.tau

                alpha[i] = ai / (bi - ci * alpha[i-1])
                beta[i] = (ci * beta[i-1] - fi) / (bi - ci * alpha[i-1])

            # Граница между первым и вторым слоями (использование специальной формулы) PEREPISAT
            # Граница между первым и вторым слоями
            i = self.N1  # индекс границы между слоями

            # Коэффициенты для первого и второго слоев
            A1 = self.lambda1 / self.h
            A2 = self.lambda2 / self.h

            # Условие непрерывности теплового потока и температуры на границе
            alpha[i] = A1 / (A1 + A2 * (1 - alpha[i - 1]))
            beta[i] = (A2 * beta[i - 1] + self.h * self.ro2 * self.c2 * self.T[i] / self.tau) / (
                        A1 + A2 * (1 - alpha[i - 1]))

            #print(alpha[self.N1 + 1], beta[self.N1 + 1])
            # Прямая прогонка для второго слоя
            for i in range(self.N1 + 1, self.N - 1):
                ai = self.lambda2 / self.h ** 2
                bi = 2.0 * self.lambda2 / self.h ** 2 + self.ro2 * self.c2 / self.tau
                ci = self.lambda2 / self.h ** 2
                fi = -self.ro2 * self.c2 * self.T[i] / self.tau

                alpha[i] = ai / (bi - ci * alpha[i - 1])
                beta[i] = (ci * beta[i - 1] - fi) / (bi - ci * alpha[i - 1])

            # Правая граница (постоянная температура)
            T_new[-1] = self.Tr

            # Обратная прогонка
            for i in range(self.N - 2, 0, -1):
                T_new[i] = alpha[i] * T_new[i + 1] + beta[i]

            self.T = T_new
            self.T_history.append(self.T.copy())

    def plot(self):
        """Построение графика распределения температуры."""
        x = np.linspace(0, self.L, self.N)
        plt.plot(x, self.T, label=f't = {self.t_end:.2f} сек')
        plt.xlabel('Длина пластины (м)')
        plt.ylabel('Температура (°C)')
        plt.title('Распределение температуры по двум слоям пластины')
        plt.grid(True)
        plt.legend()
        plt.show()


# Пример использования
if __name__ == "__main__":
    # Параметры задачи
    N1 = 50  # Количество узлов в первой части пластины
    N2 = 50  # Количество узлов во второй части пластины
    t_end = 1800  # Время моделирования (сек)
    L = 0.3  # Общая длина пластины (м)
    lambda1 = 46  # Коэффициент теплопроводности первой части пластины (Вт/м°C)
    lambda2 = 384  # Коэффициент теплопроводности второй части пластины (Вт/м°C)
    ro1 = 7800  # Плотность первой части пластины (кг/м³)
    ro2 = 8800  # Плотность второй части пластины (кг/м³)
    c1 = 460  # Теплоемкость первой части пластины (Дж/кг°C)
    c2 = 381  # Теплоемкость второй части пластины (Дж/кг°C)
    K = 0
    T0 = 10 + K  # Начальная температура (°C)
    Tl = 100 + K  # Температура на левом конце пластины (°C)
    Tr = 50 + K # Температура на правом конце пластины (°C)

    # Создание экземпляра класса и решение задачи
    two_layer_plate = TwoLayerPlate(N1, N2, t_end, L, lambda1, lambda2, ro1, ro2, c1, c2, T0, Tl, Tr)
    two_layer_plate.solve()
    two_layer_plate.plot()

